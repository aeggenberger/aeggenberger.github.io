<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Coding stuff and things</title><link href="http://aeggenberger.github.io/" rel="alternate"></link><link href="http://aeggenberger.github.io/feeds/thinking-about-working-with-data.atom.xml" rel="self"></link><id>http://aeggenberger.github.io/</id><updated>2016-09-05T11:12:43-05:00</updated><entry><title>Is d3 awk for the web?</title><link href="http://aeggenberger.github.io/d3-awk-for-web.html" rel="alternate"></link><published>2016-09-05T11:12:43-05:00</published><author><name>Andrew Eggenberger</name></author><id>tag:aeggenberger.github.io,2016-09-05:d3-awk-for-web.html</id><summary type="html">&lt;p&gt;Maybe! I don't know.&lt;/p&gt;
&lt;p&gt;But there are some similarities that helped me make the leap from the (my?) usual procedural javascript style to the more declarative, functional style embraced by d3.&lt;/p&gt;
&lt;h2&gt;'Data Driven'&lt;/h2&gt;
&lt;p&gt;Let's begin with awk's concept of records. These are the discrete chunks of data on which awk operates. At its most basic, awk goes through records one by one, optionally printing all or part of the record, transforming the record, updating a state variable to be accessed later -- all kinds of things. This is analogous to the d3 concept of data. In d3, data is &lt;a href="http://alignedleft.com/tutorials/d3/binding-data"&gt;bound&lt;/a&gt; to the DOM. Once the enter method is called, d3 iterates through the data in discrete chunks and does what it will with it.&lt;/p&gt;
&lt;p&gt;In both instances, it's the programmer's job to describe the data they want want to work with and what should happen when it's found, rather than set up a whole bunch of scaffolding and boilerplate code (for loops, etc.) to process the data. The documentation for both &lt;a href="https://www.gnu.org/software/gawk/manual/gawk.html#Getting-Started"&gt;gawk&lt;/a&gt; and &lt;a href="https://d3js.org/"&gt;d3&lt;/a&gt; describe this approach as "data driven." D3 itself is sort of but not quite an initialism for "Data-Driven Documents."&lt;/p&gt;
&lt;h2&gt;Similar philosophy, different use cases&lt;/h2&gt;
&lt;p&gt;It took me years of procedural hacking before I realized the usefulness of declarative syntax and functional programming. Now I use them whenever I can. Maybe someday I'll be able to use them whenever they are appropriate. The model is flexible enough that it can be used at different ends of my data pipeline. For instance, when I was creating a database table with a column for all the different types of police calls in Lake City, I didn't have a master list to work with. Instead I had years worth of weekly reports. Some calls, like "traffic violations," appear virtually every week. Others, like homicide, are extremely rare. Using a very short awk script, I was able to scan every file and return only the unique call types. As a bonus, I was able to format the output as a valid sql query that I ran against my database. I might use awk again to generate insert queries, one per week, into the table. &lt;/p&gt;
&lt;p&gt;Once I have my data, I'm going to want to present it to our readers. That's where d3 and its heavy focus on presentation comes in.&lt;/p&gt;</summary><category term="d3"></category><category term="awk"></category><category term="gawk"></category><category term="data processing"></category></entry></feed>